name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install System Dependencies for MySQL
      run: sudo apt-get update && sudo apt-get install -y default-libmysqlclient-dev gcc      

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests
      env:
        DB_HOST: localhost
        DB_USER: testuser
        DB_PASS: testpass
        DB_NAME: testdb
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t product-catalog:latest .

    - name: Test Docker image
      env:
        DB_HOST: localhost
        DB_USER: testuser  
        DB_PASS: testpass
        DB_NAME: testdb
      run: |
        # Run container in background
        docker run -d --name test-container \
          -e DB_HOST=$DB_HOST \
          -e DB_USER=$DB_USER \
          -e DB_PASS=$DB_PASS \
          -e DB_NAME=$DB_NAME \
          -p 5000:5000 \
          product-catalog:latest
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:5000/health || exit 1
        
        # Clean up
        docker stop test-container
        docker rm test-container

    - name: Save Docker image
      run: |
        docker save product-catalog:latest | gzip > product-catalog.tar.gz

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: product-catalog.tar.gz
        retention-days: 7
